import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchClock } from './clockAPI';


const initialState = {
  value: 0,
  status: 'idle',
  breakLength: 5,
  sessionLength: 25,
  timeLeft:1500000,
  max: 60,
  min: 1,
  intervalo: null,
  start: false,
  audio: "https://sampleswap.org/samples-ghost/SOUND%20EFFECTS%20and%20NOISES/Electro%20and%20Synthetic/196[kb]watch_alarm.wav.mp3"

};

let newStart = initialState.start
let newIntervalo =initialState.intervalo

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'clock/fetchClock',
  async (amount) => {
    const response = await fetchClock(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);



export const clockSlice = createSlice({
  name: 'clock',
  initialState,
  reducers: {
    reset: (state) => {
      
      newStart=false;
      clearInterval(newIntervalo);
     
      newIntervalo= null;
     
      state.breakLength = 5;
      state.sessionLength = 25;
      state.timeLeft = 1500000;

      const player = document.getElementById('beep');
      player.pause();
      player.currentTime = 0;
      
    },
    breakIncrement: (state) => {
      if(state.breakLength < state.max){
      state.breakLength += 1;
    }
    },
    breakDecrement: (state) => {
      if(state.breakLength > state.min){
      state.breakLength -= 1;
      }
    },
    sessionIncrement: (state) => {
      if(state.sessionLength < state.max){
        state.sessionLength += 1;
        state.timeLeft +=60000;
      }
    },
    sessionDecrement: (state) => {
      if(state.sessionLength > state.min){
        state.sessionLength -= 1;
        state.timeLeft -=60000;
        }
    },
    startStop: (state, action) =>{
    
      if (state.timeLeft >=0) {
        console.log(newIntervalo)
      state.timeLeft=action.payload}
     
    },
    newCountdownBegins: (state) =>{
      state.timeLeft+= state.breakLength*60000;
      clearInterval(newIntervalo)
      newIntervalo=null
       console.log("RESET, clearInterval:" + newIntervalo)
      
    },
    
    
    
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      })
  },

  }}
);


export const {reset, breakDecrement, breakIncrement, sessionIncrement, sessionDecrement, startStop, newCountdownBegins} = clockSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectBreakLength = (state) => state.clock.breakLength;
export const selectSessionLength = (state) => state.clock.sessionLength;
export const selectTimeLeft = (state) => state.clock.timeLeft;
export const selectIntervalo = (state) => state.clock.intervalo;
export const selectAudio = (state) => state.clock.audio;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const countDown = () => (dispatch, getState) => {
  console.log("before: "+newStart)
  newStart = !newStart
  console.log("after: "+newStart)
  
  let currentValue = selectTimeLeft(getState());

 console.log(newIntervalo)
 if(newIntervalo===null){
  newStart=true;
 newIntervalo= setInterval(() => {currentValue -=1000; dispatch(startStop(currentValue))}, 1000);

}
if(newStart===false){
  clearInterval(newIntervalo)
  newIntervalo=null
  console.log("RESET, clearInterval:" + newIntervalo)
}



};




export default clockSlice.reducer;
